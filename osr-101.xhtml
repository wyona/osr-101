<?xml version="1.0"?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<?xml-stylesheet type="text/xsl" href="xhtml.xsl"?>

<html>
    <head>
      <link rel="neutron-introspection" type="application/neutron+xml" href="introspection-osr-101.xml"/>
      <title>OSR-101 - Neutron Specification</title>
    </head>

    <body>
        <h1>Neutron - Content Management User Interface</h1>
        <h2>Open Specification Request 101</h2>
        <dt>Version: 0.0.1</dt>
        <br/>
        <dt>Revision Date: 30 June 2006</dt>
        <br/>
        <dt>Editors:</dt>
        <dd>
            Thomas Comiotto <a href="mailto:comiotto@rcfmedia.ch?subject=OSR-101">comiotto@rcfmedia.ch</a>
           <br/> Michael Wechner <a href="mailto:michael.wechner@wyona.com?subject=OSR-101">michael.wechner@wyona.com</a>
            <br/>
            Guido Wesdorp <a href="mailto:guido@infrae.com?subject=OSR-101">guido@infrae.com</a>
            <br/>
            Andreas Wuest <a href="mailto:awuest@student.ethz.ch?subject=OSR-101">awuest@student.ethz.ch</a>
        </dd>
        <hr/>

        <h2>Table of contents</h2>
   <ol>
     <li>Introduction</li>
     <li>Neutron compared to WebDAV and ATOM</li>
     <li>Key Concepts [Introspection, Authentication / Authorization, Remote File Operations, Editing - possibly Search, Revisions, Scheduling]</li>
     <li>Introspection</li>
     <ol>
       <li>Introspection Link</li>
       <li>Introspection File</li>
       <li>Navigational Information</li>
       <li>Topic Maps</li>
     </ol>
     <li>Authentication / Authorization</li>
     <li>Remote File Operations</li>
     <ol>
       <li>New</li>
       <li>Open</li>
       <li>Save</li>
       <li>Save As</li>
       <li>Exit</li>
       <li>Close</li>
       <li>Close All</li>
       <li>Save All</li>
       <li>Hypertext Link Lookup</li>
     </ol>
     <li>Editing</li>
     <li>Search</li>
     <li>Revisions</li>
     <li>Scheduling</li>
   </ol>

        <hr/>

        <a name="introduction"/>
        <h2>Introduction</h2>
        <p>
Neutron is a set of XML-based commands and configuration options that allow for remote operation of Content Management Systems (CMS). Neutron provides a thin abstraction layer for what most of today's CMS offer in terms of user operations: 
<ul>
<li>concurrent access to resources</li>
<li>basic file operations (move, delete)</li>
<li>creating resources based on templates</li>
<li>editing based on datatype constraints</li>
<li>editing in WYSIWYG mode</li>
<li>accessing revisions</li>
<li>dealing with workflow stages</li>
<li>custom authentication schemes</li> 
<li>and more</li> 
</ul>
Neutron is typically used over HTTP. However, any other transport protocol can be used to establish a Neutron request/response chain or to retrieve Neutron configuration directives.
</p>
<p>
CMS vendors usually implement their own frontend components for the operations listed above and/or implement a public API for third party component integration. Neutron is ment to be a standard that leverages  integration and reuse of third party components such as editing applications or standalone clients targeted at offline operation into existing content management solutions.  
</p>
<p>
Neutron focuses on xml-based systems by providing a comprehensive set of instructions for dealing with xml-based resources. However, usage of xml-based resources is not required. Neutron also covers transactions of binary or whatever formatted data while being extensible enough for integrators to deal with the data formats of their choice. 
</p>
<p>
For examples and usage patterns see Appendix I (Examples).
</p>


        <h2>Neutron compared to WebDAV and Atom</h2>
        <p>
          <a href="http://www.webdav.org">WebDAV</a> (<a href="http://www.webdav.org/specs/rfc2518.html">Spec</a>) may well form the basis for
          client-server communication in a typical OSR-101 setup. DAV provides a
          basic (although somewhat low-level) API for managing content on servers,
          and is already available on most modern webservers. Where required, the HTTP
          protocol can be extended even further to provide higher level functionality,
          or functionality that is simply not provided by DAV (of course another
          implementation is also possible).
        </p>
        <p>
          Some of the features described by OSR-101 are already defined by some DAV-
          related consortium as an extension to DAV, and are either accepted as a
          standard or in draft. Of these proposals and standards, DeltaV (which
          provides a versioning API), DASL (provides a searching API) and the DAV ACL
          (Access Control List) extensions are probably the most useful ones. However,
          the status of the extensions varies from accepted and implemented (DeltaV)
          to draft revision 0 (ACL extension) and it may therefore be that we can not
          implement the API as intended. A decision will need to be made about whether
          OSR-101 is going to build on those extensions at all, and if so, what to do
          with grey areas in the proposals/standards.
        </p>
        <p>
          Also see the Universal Content Broker Project
          (<a href="http://ucb.openoffice.org/">http://ucb.openoffice.org/</a>) ...
          also see the
          <a href="http://bitworking.org/projects/atom/">Atom Protocol</a> (or
          <a href="http://webservices.xml.com/lpt/a/ws/2003/08/05/salz.html">Atom
          API</a> or <a href="http://www.intertwingly.net/wiki/pie/WebDav">Relationship between Atom and WebDAV</a>).
        </p>

        <p>
          It might also be interesting to follow the development of the OpenUsability
          project <a href="http://openusability.org/projects/cms-uig/">User Interface
          Guidelines for Content Management Systems</a>.
        </p>

        <a name="introspection"/>
        <h2>Introspection</h2>
        <p>
          The communication between the client and server can be initialized by
          introspection. This also allows the server to tell the client of it's
          capabilities (e.g. level 1, 2, 3 compliance). Also see the specification of <a href="http://www.ietf.org/internet-drafts/draft-ietf-atompub-protocol-08.txt">Atom</a> resp. <a href="http://bitworking.org/projects/atom/">http://bitworking.org/projects/atom/</a>.
        </p>

        <p>
          Finding the introspection file (auto-discovery)
        </p>

        <pre>
<![CDATA[
<?xml version="1.0"?>

<html>
  <head>
    <link rel="neutron-introspection" type="application/neutron+xml" href="introspection.xml"/>
  </head>
</html>
]]>
        </pre>

        <p>
          An example of an introspection file
        </p>

        <pre>
<![CDATA[
<?xml version="1.0"?>

<introspection xmlns="http://www.wyona.org/neutron/1.0">

<edit mime-type="application/xhtml+xml" name="Related Content">
  <!-- Edit "Related Content" -->
  <open url="http://foo.bar.com/test.xhtml" method="GET"/>

  <!-- Checkout and Edit "Related Content" -->
  <checkout url="http://foo.bar.com/test.xhtml?action=checkout" method="GET"/>

  <!-- Save "Related Content" -->
  <save url="http://foo.bar.com/test.xhtml?action=save" method="POST"/>
  <!-- Save and Checkin "Related Content" -->
  <save url="http://foo.bar.com/test.xhtml?action=checkin" method="POST"/>
</edit>

<edit mime-type="application/xml" version="433453" name="Main Content">
  <open url="http://foo.bar.com/lenya/default/authoring/index.html?lenya.usecase=open" method="GET"/>
<!-- Also see authentication and authorization ... -->
<!--
  <open url="https://foo.bar.com/lenya/default/authoring/index.html?lenya.usecase=open" method="GET"/>
-->
  <save url="http://foo.bar.com/lenya/default/authoring/index.html?lenya.usecase=save" method="PUT"/>

  <schemas>
    <schema href="http://foo.bar.com/lenya/modules/docbook/schemas/simple.rng" type="RelaxNG"/>
    <schema href="http://foo.bar.com/lenya/modules/docbook/schemas/default.rng" type="RelaxNG"/>
  </schemas>
  <styles>
    <style href="http://foo.bar.com/lenya/modules/xhtml/styles/default.xsl"/>
    <style href="http://foo.bar.com/lenya/modules/xhtml/styles/simple.xsl"/>
  </styles>
</edit>

<!-- NOTE: What about delivering this as package, e.g. with a MANIFEST included? -->

<new>
  <templates uri="http://foo.bar/templates"/>
</new>

<navigation>
  <sitetree href=""/>
  <topicmap href=""/>
  <search type="simple">
    <uri="http://search.msn.com/results.aspx?format=rss&amp;FORM=ZZRE"/>
    <query-string-parameter name="q"/>
    <response type="rss"/>
  </search>
  <search type="simple">
    <uri="http://www.google.com/search?hl=en&amp;btnG=Google+Search"/>
    <query-string-parameter name="q"/>
    <response type="html"/>
  </search>
</navigation>

</introspection>
]]>
        </pre>

        <p>
        The version of introspection is given by the following namespace convention: http://www.wyona.org/neutron/VERSION
        </p>

        <h3>Backward Compatibility</h3>
        <p>
        If the client supports higher versions of the introspection spec than the server can deliver, but
        the client still offers the lower version introspection parsers with the correct internal mapping.
        </p>

        <h3>Forward Compatibility</h3>
        <p>
        If the client introspection implementation version is lower than the introspection version which
        is delivered by the server, then one would assume the client to throw a warning, but nevertheless the client should try to handle this newer version as good as possible. But this can only work if the spec is enhanced only (e.g. adding an attribute or element), and never really changed. Another solution might be that the client adds its supported introspection versions to the HTTP header of the GET request to retrieve the introspection from the server, e.g. OSR-101-Version: 1.0.
        </p>

        <a name="authentication"/>
        <h2>Authentication</h2>
        <p>
        <ul>
          <li><a href="http://httpd.apache.org/docs/1.3/howto/auth.html">http://httpd.apache.org/docs/1.3/howto/auth.html</a></li>
          <li><a href="ftp://ftp.isi.edu/in-notes/rfc2616.txt">HTTP Credentials</a></li>
          <li><a href="http://bitworking.org/projects/atom/draft-ietf-atompub-protocol-08.html">Securing Atom</a></li>
          <li>What about client certificates?</li>
        </ul>
        </p>

        <a name="authorization"/>
        <h2>Authorization</h2>
        <p>
        TODO: What about multi-stage/step process, e.g. first dialog to enter username and password and second dialog to enter a pre-generated random number?
        </p>

<p>
Response from Server to Client
<pre>
<![CDATA[
<?xml version="1.0"?>

<exception xmlns="http://www.wyona.org/neutron/1.0" type="authorization">
  <message>Authorization denied for "URL" ...</message>

  <authentication>
    <login url="https://demo.phoenix.wyona.org/protected/?action=login-neutron">
      <message>Login for realm 'phoenix-demo' ...</message>
      <form>
        <param description="Username" name="username"/>
        <param description="Password" name="passwd"/>
      </form>
    </login>
    <logout url="http://demo.phoenix.wyona.org/?action=logout"/>
  </authentication>
</exception>
]]>
</pre>
</p>

<p>
Response from Client to Server
<pre>
<![CDATA[
<?xml version="1.0"?>

<authentication xmlns="http://www.wyona.org/neutron/1.0">
  <param name="username">lenya</param>
  <param name="passwd">levi</param>
</authentication>
]]>
</pre>
</p>

        <a name="editing-new"/>
        <h2>New</h2>
        <p>
          The action "New" allows to create a new document by selecting a template.
          The CMS/server needs to provide a template listing to the client such that
          the client can provide a dialog in order to let the user select a template.
          The "New" action entails a "Save As" action in order to allow specifying a
          new document name when actually saving.
        </p>

        <h3>Request</h3>
        <p>
          ...
        </p>

        <h3>Response</h3>
        <pre>
<![CDATA[
<?xml version="1.0"?>

<cmui>
  <response type="edit-new">
  <edit-new>
    <templates>
      <template name="Letter" src="http://foo.bar/letter.xml"/>
      <template name="Article" src="http://foo.bar/article.xml"/>
    </templates>
  </edit-new>
  </response>
</cmui>
]]>
        </pre>

        <a name="editing-open"/>
        <h2>Open</h2>
        <p>
          The action "Open" allows to open an existing document.
          If the client has already a document loaded and a new document will be
          opened, then the loaded document might be closed automatically (please also
          see "Close" and "Save All").
        </p>

        <p>
          The CMS needs to provide a directory listing to the client such that the
          client can provide a dialog in order to let the user select a document.
        </p>

        <p>
          When a user attempts to open a document, then the server needs to check if
          the document might have been locked already respectively opened by another
          user.  If it has already been locked respectively opened by another user,
          then the CMS needs to communicate to the client that this document is
          currently locked and maybe provide a functionality to break the lock.
          Otherwise the document needs to be locked on the server side if the document
          is being opened.
        </p>

        <p>
          The document path needs to be kept within the client in order to allow
          saving to the original document on the server side.
        </p>

        <h3>Usecases</h3>
        <ul>
          <li>Open from Local Desktop</li>
          <li>Open from Server (server does not support locking)</li>
          <li>Open from Server (checkout with lock)</li>
          <li>Open from Server (checkout without lock although server does support locking)</li>
        </ul>

<h4>Open from Server with locking/checkout implemented</h4>
<p>
<pre>
<![CDATA[
<?xml version="1.0"?>

<exception xmlns="http://www.wyona.org/neutron/1.0" type="checkout">
  <message>Document has already been checked-out by ...</message>

  <checkout url="/hello/world.html">
    <locked-by>Jimi Hendrix</locked-by>
    <lock-date format="standard">1969.10.03T15:34:26</lock-date>
    <!-- Optional. Depending on server implementation -->
    <break-lock url="/hello/world.html?yanel.resource.usecase=break-lock"/>
  </checkout>
</exception>
]]>
</pre>
</p>

<p>
How does the server respond to the "break-lock" request?
<ul>
  <li>Server breaks lock, check-out for new user and returns content.</li>
  <li>Server breaks lock and returns lock broken successfully, please retry opening again ...</li>
  <li>Server responds breaking the lock failed for whatever reason.</li>
</ul>
</p>



        <a name="editing-save"/>
        <h2>Save</h2>
        <p>
          The "Save" action allows to save a document to the path which was selected
          when loading the document with the "Open" action.
        </p>

        <p>
          It might be assumed that no temporary copies are being used on the server
          side, but rather the original document is being overwritten. This might lead
          to the confusing situation, that changes on the server side can been seen,
          which are only temporarily.
        </p>

        <h3>Usecases</h3>
        <ul>
          <li>Save to Local Desktop (default behaviour in case document has been opened from local desktop)</li>
          <li>Save to Local Desktop (although document has been retrieved from server)</li>
          <li>Save to Server (server does not support locking)</li>
          <li>Save to Server temp version (in case server supports this functionality)</li>
          <li>Save to Server (checkin, remove the lock)</li>
        </ul>

<p>
If the server is able to save successfully, then it should return HTTP Status Code 200.
</p>

<p>
If the server cannot save the data, then it should return <a href="http://www.w3.org/Protocols/HTTP/HTRESP.html">HTTP Status Code 500</a> and a message.
</p>

<p>
<pre>
<![CDATA[
<?xml version="1.0"?>

<exception xmlns="http://www.wyona.org/neutron/1.0" type="checkin">
  <message>Checkin failed, because document has been checked-out by ...</message>

  <checkin url="/hello/world.html">
    <locked-by>Jimi Hendrix</locked-by>
    <lock-date format="standard">1969.10.03T15:34:26</lock-date>
    <!-- Optional. Depending on server implementation -->
    <break-lock url="/hello/world.html?yanel.resource.usecase=break-lock"/>
  </checkin>
</exception>
]]>
</pre>
</p>

<p>If the server has trouble saving the data, e.g.</p>

<p>
<pre>
<![CDATA[
<?xml version="1.0"?>

<exception xmlns="http://www.wyona.org/neutron/1.0" type="data-not-well-formed">
  <message>Received data is not well-formed XML ...</message>

  <data-not-well-formed url="/hello/world.html">
    <line number="45" message="element not closed"/>
  </data-not-well-formed>
</exception>
]]>
</pre>
</p>

        <a name="editing-save-as"/>
        <h2>Save As</h2>
        <p>
        Get a tree
        <a href="http://www.ietf.org/rfc/rfc2518.txt">Example 8.1.2</a>
        </p>

        <a name="editing-exit"/>
        <h2>Exit</h2>
        <p>
          The "Exit" action allows to quit the client. If the user clicks on the
          "Exit" menu item, then the client opens a dialog, where the user can select
          the following buttons/options:
        </p>

        <ul>
          <li>Save</li>
          <li>Save As</li>
          <li>Don't save (Exit but do not save)</li>
          <li>Cancel (Do not exit)</li>
        </ul>

        <p>
          If a lock has been created during opening, then this locks needs to be
          removed at this point.  In case the CMS would support breaking the lock by
          another user, then the CMS should communicate a broken lock to the client.
        </p>

        <a name="editing-link-lookup"/>
        <h2>Hypertext Link Lookup</h2>
        <p>
          The hypertext link lookup functionality allows to add a hypertext link to a
          text. One selects part of a text and clicks on the link icon which is
          triggering a request to the server(s) in order to provide the content resp.
          interface for a link selecting dialog. One could imagine the following types
          of dialogs:
        </p>

        <ul>
          <li>Text Field to paste a link</li>
          <li>Search Field</li>
          <li>Simple resource list</li>
          <li>Hierarchical resource listing (tree-view)</li>
          <li>Topic Map with resource occurences (graph-view)</li>
        </ul>

        <h3>Response: Search Field</h3>
        <pre>
        <![CDATA[
        <?xml version="1.0"?>

        <cmui>
          <response type="edit-link">
          <edit-link>
            <search src="http://foo.bar/search"/>
          </edit-link>
          </response>
        </cmui>
        ]]>
        </pre>

        <h3>Response: Simple List</h3>
        <pre>
        <![CDATA[
        <?xml version="1.0"?>

        <cmui>
          <response type="edit-link">
          <edit-link>
            <simple-list>
              <link name="Archibald Alexander Leach" src="http://foo.bar/leach.pdf"/>
              <link name="Cary Grant" src="http://foor.bar/cary_grant.html"/>
            </simple-list>
          </edit-link>
          </response>
        </cmui>
        ]]>
        </pre>

        <a name="search"/>
        <h2>Search</h2>
        <p>
          In the case of OpenOffice.org one can add new search engines by clicking on
          Tools --> Options --> Internet --> Search
        </p>

        <p>
          As an exchange format one might want to use the <a
          href="http://opensearch.a9.com/">OpenSearch RSS</a>.
        </p>

        <a name="workflow"/>
        <h2>Workflow</h2>
        <p>
        ...
        </p>

        <hr/>

        <a name="commentaries"/>
        <h2>Commentaries</h2>

        <h3>April 20, 2006 Commentary (Andreas Wuest)</h3>
        <h4>Sessions</h4>
        <ul>
          <li><p>"The communication between the client and server can be initialized by introspection.": it is not clear if this means that some kind of sessions is initiated between the client and the server. IMHO, introspection should NOT initiate a session, since this is simply a query operation on what capabilities the server has.</p></li>
        </ul>

        <h4>Save As</h4>
        <ul>
          <li><p>We need a way to upload a file to the CMS without having previously issued a New or an Open. (This with regard to the CMSConnector for uploading attachments from a mail client to the CMS.)</p></li>
        </ul>

        <h4>Directory Listing</h4>
        <ul>
          <li><p>It should be possible to query the directory tree, starting from the root. The server should not return the complete tree, but only the content of the queried directory node.</p></li>
        </ul>

        <h4>Asset Type Querying</h4>
        <ul>
          <li><p>I assume that the list of legal asset types is provided via the introspection file. What I am thinking about though is a way for the server to PROPOSE an asset type for a given MIME type. Example: CMSConnector wants to upload an attachment. Before saving, CMSConnector somehow communicates the MIME type of the attachment to the server, and the server then proposes a suitable asset type for this MIME type.</p></li>
        </ul>

        <h4>Authentication</h4>
        <ul>
          <li><p>Each operation should support authentication of the client.</p>
            <ul>
              <li><p>Simple username/password tuple:</p>
                <ul>
                  <li><p>Ways of identification:</p>
                    <ul>
                      <li><p>session cookie</p>
                        <ul>
                          <li><p>pros:</p>
                            <ul>
                              <li><p>authentication only once per session</p></li>
                            </ul>
                          </li>
                          <li><p>cons:</p>
                            <ul>
                              <li><p>needs sessions semantics</p></li>
                              <li><p>when does the session cookie expire if there is no normal exit</p></li>
                            </ul>
                          </li>
                        </ul>
                      </li>
                      <li><p>username/password is supplied with each operation</p></li>
                    </ul>
                  </li>
                </ul>
              </li>
              <li>Challenge/Response</li>
              <li>Client certificate</li>
            </ul>
          </li>
        </ul>

        <h4>Security</h4>

    </body>
</html>
